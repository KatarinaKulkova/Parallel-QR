import numpy as np
from scipy.linalg import solve_triangular
import multiprocessing as mp


output = mp.Queue()
num = mp.cpu_count()


def parallel_qr(matrix):
    ms = np.array_split(matrix, num)
    qs1, rs = zip(*map(np.linalg.qr, ms))
    r1 = np.concatenate(rs)
    q, r2 = np.linalg.qr(r1)
    qs2 = np.array_split(q, num)
    qs = map(np.matmul, qs1, qs2)
    return np.concatenate(qs), r2


def least_squares(matrix, vector):
    q, r = parallel_qr(matrix)
    rhs = np.dot(np.transpose(q), vector)
    return solve_triangular(r, rhs)


def 